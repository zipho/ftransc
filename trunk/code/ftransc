#!/usr/bin/python
# Audio converter script
# Copyright 2007-2011 Mkhanyisi Madlavana

from os import remove, chdir, getcwd, walk
from os.path import exists, isfile, isdir
from subprocess import Popen, PIPE
from optparse import OptionParser
from time import strftime, time

from mutagen import File
from mutagen.id3 import TPE1, TALB, TIT2, TRCK, TCON, TDRC
from mutagen.mp3 import Open as open_mp3
from mutagen.mp4 import Open as open_mp4
from mutagen.asf import Open as open_asf
from mutagen.flac import Open as open_flac
from mutagen.oggvorbis import Open as open_ogg

class MetaTag(object):
    __tag_mapping = {
        '.wma': {
            'artist': 'Author', 'album': 'WM/AlbumTitle', 'title': 'Title', 
            'genre': 'WM/Genre', 'year': 'WM/Year', 'tracknumber': 'WM/TrackNumber'
        },
        '.mp3': {
            'artist': 'TPE1', 'album': 'TALB', 'title': 'TIT2', 
            'genre': 'TCON', 'year': 'TDRC', 'tracknumber': 'TRCK'
        },
        '.m4a': {
            'artist': '\xa9ART', 'album': '\xa9alb', 'title': '\xa9nam', 
            'genre': '\xa9gen', 'year': '\xa9day', 'tracknumber': 'trkn'
        },
        '.ogg': {
            'artist': 'artist', 'album': 'album', 'title': 'title', 
            'genre': 'genre', 'year': 'date', 'tracknumber': 'tracknumber'
        },
        '.flac': {
            'artist': 'artist', 'album': 'album', 'title': 'title', 
            'genre': 'genre', 'year': 'date', 'tracknumber': 'tracknumber'
       }
    }
    __id3_mapping = {
            'artist': TPE1, 'album': TALB, 'title': TIT2, 
            'genre': TCON, 'year': TDRC, 'tracknumber': TRCK
    }
    __opener = {
            '.mp3': open_mp3, '.wma': open_asf, '.ogg': open_ogg, 
            '.flac': open_flac, '.m4a': open_mp4, 
   }

    def __init__(self, input_file):
        self.input_file = input_file
        self.tags = {
                'title': None, 'artist': None, 'album': None, 
                'year': None, 'genre': None, 'tracknumber': None
        }
        self.extract()
    
    def extract(self):
        """
        extracts metadata tags from the audio file
        """
        metadata = File(self.input_file, easy=True)
        ext = get_ext(self.input_file)[1].lower()
        if ext in ('.ogg', '.flac', '.mp3', '.mp4', '.acc', '.m4a'):
            for tag in self.tags:
                if tag in metadata:
                    self.tags[tag] = metadata[tag][0]
        elif ext == '.wma':
            for tag, wma_key in self.__tag_mapping[ext].items():
                if wma_key in metadata:
                    self.tags[tag] = metadata[wma_key][0]
    
    def insert(self, output_file):
        """
        inserts metadata tags into an audio file.
        """        
        ext = get_ext(output_file)[1].lower()
        metadata = self.__opener[ext](output_file)
        for tag, value in self.tags.items():
            if value is None:
                continue
            if ext == '.mp3':
                metadata[self.__tag_mapping[ext][tag]] = self.__id3_mapping[tag](encoding=3, text=[u'%s' % value])
           
            elif ext == '.m4a':
                if tag == 'tracknumber':
                    try:
                        trkn = [int(i) for i in value.split('/')]
                        metadata[self.__tag_mapping[ext][tag]] = [(trkn[0], trkn[1])]
                    except IndexError:
                        metadata[self.__tag_mapping[ext][tag]] = [(trkn[0], 0)]
                else:
                    metadata[self.__tag_mapping[ext][tag]] = [u'%s' % value]

            elif ext in ('.wma', '.ogg', '.flac'):
                metadata[self.__tag_mapping[ext][tag]] = [u'%s' % value]
        metadata.save()
  
def get_ext(f):
    """ 
    returns (filename_without_ext, ext)
    eg: 'mysong.mp3' will be returned as 
    ('mysong','.mp3')
    """
    idx = f.rfind('.')
    if idx < 0:
        return (f, None)
    else:
        return (f[:idx], f[idx:])

def check_deps(check=False,log=None):
    """
    checks whether all dependencies for this script are installed or not.
    """
    deps = {
            'mutagen-inspect'   : [],
            'ffmpeg'            : ['mp3', 'ogg', 'wma', 'm4a', 'flac', 'wav'],
            'lame'              : ['mp3'],
            'flac'              : ['flac'],
            'faac'              : ['m4a'],
            'oggenc'            : ['ogg'],
            }
    for d in deps.keys():
        pkg = Popen(["which", d], stdout=PIPE).communicate()[0].strip() 
        if check:
            print d + '...',
            if not pkg:
                print red + "not installed" + nc + "."
            else:
                print green + "installed" + nc + "."
        else:
            log.write("[%s]" % strftime('%H:%M:%S'))
            if pkg:
                log.write("%s\n" % pkg)
            else:
                msg = "_______ %s not installed _______" % d
                print red + msg + nc + "."
                log.write(msg + "\n")
                for fmt in deps[d]:
                    supported_formats.remove(fmt)
    if check:
        raise SystemExit(0)

def convert_to_mp3(filename, ext, stderr_out, preset=None):
    """
    converts input track to MPEG-1 Layer III format (aka MP3)
    """
    cmd1 = ["ffmpeg", "-y", "-i", filename + ext, "-f", "wav", "/dev/stdout"]
    cmd2 = ("lame " + preset).split()
    cmd2.extend(["-", "./" + filename + ".mp3"])
    return convert(stderr_out, cmdline1=cmd1, cmdline2=cmd2)

def convert_to_m4a(filename, ext, stderr_out, preset=None):
    """
    converts input track into MPEG-4 audio format (aka AAC/M4A/MP4)
    """
    cmd1 = ["ffmpeg", "-y", "-i", filename + ext, "-f", "wav", "/dev/stdout"]
    cmd2 = ("faac " + preset).split()
    cmd2.extend(["-o", "./" + filename + ".m4a", "/dev/stdin"])
    return convert(stderr_out, cmdline1=cmd1, cmdline2=cmd2)
   
def convert_to_wma(filename, ext, stderr_out, preset=None):
    """
    converts an input track into the Microsoft ASF format (aka WMA)
    """
    cmd1 = ["ffmpeg", "-y", "-i", filename + ext]
    cmd2 =  preset.split()
    cmd1.extend(cmd2)
    cmd1.append("./" + filename + ".wma")
    return convert(stderr_out, cmdline1=cmd1)

def convert_to_ogg(filename, ext, stderr_out, preset=None):
    """
    converts input track into Ogg Vorbis format
    """
    cmd1 = ["ffmpeg", "-y", "-i", filename + ext, "-f", "wav", "/dev/stdout"]
    cmd2 = ("oggenc " + preset).split()
    cmd2.extend(["-o", "./" + filename + ".ogg", "/dev/stdin"])
    return convert(stderr_out, cmdline1=cmd1, cmdline2=cmd2)
   
def convert_to_wav(filename, ext, stderr_out, preset=None):
    """
    decodes a track into WAVE format. This format has no metadata support.
    """
    cmd = ["ffmpeg", "-y", "-i", filename + ext, "-f", "wav", "./" + filename + ".wav"]
    return convert(stderr_out, cmdline1=cmd)

def convert_to_flac(filename, ext, stderr_out, preset=None):
    """
    converts input track into Free Lossless Audio Codec format (aka FLAC).
    """
    status = convert_to_wav(filename, ext, stderr_out)
    if not status:
        return status
    cmd = ("flac " + preset).split()
    cmd.extend(["-f", "-o", "./" + filename + ".flac", filename + ".wav"])
    return convert(stderr_out, cmdline1=cmd)

def convert(stderr_out, cmdline1=None, cmdline2=None):
    if cmdline1 is not None and cmdline2 is not None:
        p1 = Popen(cmdline1, stdout=PIPE, stderr=stderr_out)
        p2 = Popen(cmdline2, stdin=p1.stdout, stdout=PIPE, stderr=stderr_out)
        output = p2.communicate()
        return not p2.returncode
    elif cmdline1 is not None and cmdline2 is None:
        p1 = Popen(cmdline1, stdout=PIPE, stderr=stderr_out)
        output = p1.communicate()
        return not p1.returncode
    else:
        raise SystemExit("Error: unexpected arguments on: convert()")

supported_formats = set(['mp3', 'wma', 'wav', 'ogg', 'flac', 'm4a'])
quality_presets = {
        "mp3": 
        {
            "insane"    : "--cbr -b 320",
            "extreme"   : "-V 0",
            "high"      : "-V 2",
            "normal"    : "-V 4",
            "low"       : "--preset 64",
            "tiny"      : "--cbr -b 32 -m m -s 32",
            },
        "ogg": 
        {
            "insane"    : "-q 10",
            "extreme"   : "-q 8",
            "high"      : "-q 6",
            "normal"    : "",
            "low"       : "-q 1",
            "tiny"      : "-q -1",
            },
        "wma":
        {
            "insane"    : "-ab 320000 -ac 2 -acodec wmav2",
            "extreme"   : "-ab 256000 -ac 2 -acodec wmav2",
            "high"      : "-ab 192000 -ac 2 -acodec wmav2",
            "normal"    : "-ab 128000 -ac 2 -acodec wmav2",
            "low"       : "-ab 64000 -ac 2 -acodec wmav2",
            "tiny"      : "-ab 32000 -ac 2 -acodec wmav2",
            },
        "m4a":
        {
            "insane"    : "-q 500 -w",
            "extreme"   : "-q 350 -w",
            "high"      : "-q 200 -w",
            "normal"    : "-w",
            "low"       : "-q 50 -w",
            "tiny"      : "-q 10 -w",
            },
        "flac":
        {
            "insane"    : "--best",
            "extreme"   : "-7",
            "high"      : "-6",
            "normal"    : "-5",
            "low"       : "-3",
            "tiny"      : "--fast",
            },
}
converters = {
        "mp3": convert_to_mp3, "ogg": convert_to_ogg, "m4a": convert_to_m4a, 
        "wma": convert_to_wma, "wav": convert_to_wav, "flac": convert_to_flac,
        }

if __name__ == "__main__":
    parser = OptionParser(usage="%prog [options] [files]", version="4.0.2")
    parser.add_option('-f', '--format', type=str, default='mp3', help='audio format to convert to')
    parser.add_option('-q', '--quality', type=str, default='normal', help='audio quality preset')
    parser.add_option('-c', '--check', dest='check', action='store_true', help='check dependencies')
    parser.add_option('-r', '--remove', dest='remove', action='store_true', help='remove original file after converting successfully')
    parser.add_option('-d', '--decode', dest='decode', action='store_true', help='decode file .wav format')
    parser.add_option('-w', '--over', dest='overwrite', action='store_true', help='overwrite destination file if it exists already')
    parser.add_option('-u', '--unlock', dest='unlock', action='store_true', help='unlock a locked file and convert')
    parser.add_option('--directory', dest="walk", default=None, type=str, help='convert all files inside the given directory')
    opt, files = parser.parse_args()

    fmt = opt.format.lower()
    qual = opt.quality.lower()

    if len(files) < 1 and opt.walk is None and opt.check is None:
        raise SystemExit("ftransc: no input file")
    
    if opt.walk is not None:
        walker = walk(opt.walk)
        dest_dir, dummy, files = walker.next()
        pwd = getcwd()
        chdir(dest_dir)
        
    rd = "\033[1;31m"
    gr = "\033[1;32m"
    bl = "\033[1;34m"
    pk = "\033[1;35m"
    nc = "\033[0m"
    
    if fmt in ("mp4","m4a","aac"): fmt = "m4a"
    if opt.decode: fmt = "wav"
    if fmt not in supported_formats: raise SystemExit("%s%s%s is not a supported format" % (rd, fmt, nc))
    if fmt != 'wav':
        if qual not in quality_presets[fmt]:
            print "%s%s%s is not a valid quality preset, using %s%s%s." % (rd, qual, nc, gr, 'normal', nc)
            qual = "normal"
    with open('/tmp/ftransc.log','w') as log: check_deps(opt.check, log=log)

    # on each file: 1. extract tags, 2. audio convert, and 3. insert tags
    c = 0
    total = len(files)
    try: preset = quality_presets[fmt][qual]
    except: preset = None
    for ifile in files:
        log = open('/tmp/ftransc.log','a')
        null = open('/dev/null','w')
        c += 1
        ofile = get_ext(ifile)[0] + "." + fmt
        
        if ofile == ifile:
            print "[%s%d/%d%s]: %s%s%s: same input file & output file" % (pk, c, total, nc, rd, ifile, nc)
            continue
        if not exists(ifile):
            print "[%s%d/%d%s]: %s%s%s does not exist" % (pk, c, total, nc, rd, ifile, nc)
            continue
        if isfile(ofile) and not opt.overwrite:
            print "[%s%d/%d%s]: skipping %s%s%s: overwrite disabled" % (pk, c, total, nc, rd, ifile, nc)
            continue
        if isdir(ifile) and opt.walk is None:
            print "[%s%d/%d%s]: skipping directory %s%s%s, use '--directory'" % (pk, c, total, nc, rd, ifile, nc)
            continue

        #_____________ lockfile creation ________________
        swp_file = ".%s.swp" % ifile
        if isfile(swp_file) and not opt.unlock:
                print "%s%d/%d%s | %s%s%s | %slocked%s" % (pk, c, total, nc, bl, ifile, nc, rd, nc)
                continue
        elif not isfile(swp_file):
            try:
                with open(swp_file, 'w'): pass
            except IOError:
                raise SystemExit("You %sdo not have permissions%s to write to this folder" % (rd, nc))

        #______________ extract metadata ________________
        try:
            metadata = MetaTag(ifile)
        except IOError:
            print "%s%d/%d%s | %s%s%s | %s%Unreadable%s"  % (pk, c, total, nc, bl, ifile, nc, rd, nc)
            log.write('Fail\n')
            dummy = remove(swp_file)
            continue
        
        #___________ audio convert ______________
        ifilename, in_ext = get_ext(ifile)
        log.write("[%s]converting '%s' to %s format ... " % (strftime('%H:%M:%S'), ifile, fmt.upper()))
        tic = time()
        if converters[fmt](ifilename, in_ext, null, preset=preset):
            toc = time()
            print "%s%d/%d%s | to %s | %s%s%s | %sSuccess%s | %d seconds" % (pk, c, total, nc, fmt.upper(), bl, ifile, nc, gr, nc, toc - tic)
            log.write('OK\n')
            if opt.remove: dummy = remove(ifile)
            dummy = remove(swp_file)
        else:
            print "%s%d/%d%s | to %s | %s%s%s | %sFail%s" % (pk, c, total, nc, fmt.upper(), bl, ifile, nc, rd, nc)
            log.write('Fail\n')
            dummy = remove(swp_file)
            del metadata
            continue

        #___________ insert metadata to new audio file ___________
        try:
            log.write("[%s]inserting metadata to '%s' ... " % (strftime('%H:%M:%S'), ofile))
            metadata.insert(ofile)
            log.write("OK\n")
        except:
            log.write("Fail\n")
        del metadata
        log.close()
        null.close()
