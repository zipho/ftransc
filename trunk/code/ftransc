#!/usr/bin/python
"""
ftransc is a script that bundles up utilities for audio conversion.
"""

from os.path import (
        sep,
        isabs,
        isdir, 
        exists, 
        isfile, 
        dirname, 
        basename, 
        realpath,
        splitext,
)
from os import remove, chdir, getcwd, walk, system, environ
from subprocess import Popen, PIPE
from optparse import OptionParser
from time import time
from urllib import urlopen
from sys import argv

import mutagen
from mutagen import File
from mutagen.id3 import TPE1, TALB, TIT2, TRCK, TCON, TDRC
from mutagen.mp3 import Open as open_mp3
from mutagen.mp4 import Open as open_mp4
from mutagen.asf import Open as open_asf
from mutagen.flac import Open as open_flac
from mutagen.oggvorbis import Open as open_ogg
from mutagen.musepack import Open as open_mpc

class MetaTag(object):
    """
    handles tag extraction and insertion into and/or from audio files
    """
    __tag_mapping = {
        '.wma': {
            'artist'        : 'Author', 
            'album'         : 'WM/AlbumTitle', 
            'title'         : 'Title', 
            'genre'         : 'WM/Genre', 
            'year'          : 'WM/Year', 
            'tracknumber'   : 'WM/TrackNumber',
        },
        '.mp3'  : {
            'artist'        : 'TPE1', 
            'album'         : 'TALB', 
            'title'         : 'TIT2', 
            'genre'         : 'TCON', 
            'year'          : 'TDRC', 
            'tracknumber'   : 'TRCK',
        },
        '.m4a'  : {
            'artist'        : '\xa9ART', 
            'album'         : '\xa9alb', 
            'title'         : '\xa9nam', 
            'genre'         : '\xa9gen', 
            'year'          : '\xa9day', 
            'tracknumber'   : 'trkn',
        },
        '.ogg'  : {
            'artist'        : 'artist', 
            'album'         : 'album', 
            'title'         : 'title', 
            'genre'         : 'genre', 
            'year'          : 'date', 
            'tracknumber'   : 'tracknumber',
        },
        '.flac' : {
            'artist'        : 'artist', 
            'album'         : 'album', 
            'title'         : 'title', 
            'genre'         : 'genre', 
            'year'          : 'date', 
            'tracknumber'   : 'tracknumber',
        },
        '.mpc'  : {
            'artist'        : 'Artist', 
            'album'         : 'Album', 
            'title'         : 'Title', 
            'genre'         : 'Genre', 
            'year'          : 'Year', 
            'tracknumber'   : 'Track',
        },
    }
    __id3_mapping = {
            'artist'        : TPE1, 
            'album'         : TALB, 
            'title'         : TIT2, 
            'genre'         : TCON, 
            'year'          : TDRC, 
            'tracknumber'   : TRCK
    }
    __opener = {
            '.mp3'          : open_mp3, 
            '.wma'          : open_asf, 
            '.ogg'          : open_ogg, 
            '.m4a'          : open_mp4, 
            '.flac'         : open_flac,
            '.mpc'          : open_mpc,
   }

    def __init__(self, input_file):
        self.input_file = input_file
        self.tags = {
                'title'         : None, 
                'artist'        : None, 
                'album'         : None, 
                'year'          : None, 
                'genre'         : None, 
                'tracknumber'   : None
        }
        self.exts = ['.ogg', '.mp3', '.flac', '.mp4', '.aac', '.m4a',
                               '.mpc', '.wma']
        self.extract()
    
    def extract(self):
        """
        extracts metadata tags from the audio file
        """
        tags = File(self.input_file, easy=True)
        ext = splitext(self.input_file)[1].lower()
        if ext != '.wma' and ext in self.exts:
            for tag in self.tags:
                if tag in tags:
                    self.tags[tag] = tags[tag][0]
        elif ext == '.wma':
            for tag, wma_key in self.__tag_mapping[ext].items():
                if wma_key in tags:
                    self.tags[tag] = tags[wma_key][0]
    
    def insert(self, output_file):
        """
        inserts tags tags into an audio file.
        """        
        ext = splitext(output_file)[1].lower()
        if ext not in self.__opener:
            return 1
        tags = self.__opener[ext](output_file)
        for tag, value in self.tags.items():
            if value is None:
                continue
            if ext == '.mp3':
                tags[self.__tag_mapping[ext][tag]] = \
                self.__id3_mapping[tag](encoding=3, text=[u'%s' % value])
            elif ext in self.exts and ext != '.mp3':
                if tag == 'tracknumber' and ext == '.m4a':
                    try:
                        trkn = [int(i) for i in value.split('/')]
                        tags[self.__tag_mapping[ext][tag]] = \
                                [(trkn[0], trkn[1])]
                    except IndexError:
                        tags[self.__tag_mapping[ext][tag]] = [(trkn[0], 0)]
                else:
                    tags[self.__tag_mapping[ext][tag]] = [u'%s' % value]
        tags.save()
  
def check_deps(check=False):
    """
    checks whether all dependencies for this script are installed or not.
    """
    deps = {
            'mutagen-inspect'   : [],
            'ffmpeg'            : ['mp3', 'ogg', 'wma', 'm4a', 'flac', 'wav'],
            'lame'              : ['mp3'],
            'flac'              : ['flac'],
            'faac'              : ['m4a'],
            'oggenc'            : ['ogg'],
            'mppenc'            : ['mpc'],
            }
    for d in deps:
        pkg = Popen(["which", d], stdout=PIPE).communicate()[0].strip() 
        if check:
            print d + '...' + rd + " not installed" + nc if not pkg \
                    else d + '...' + gr + " installed" + nc
        else:
            if not pkg:
                print "%s_______ %s not installed _______%s" % (rd, d, nc)
                for fmt in deps[d]:
                    supported_formats.remove(fmt)
    if check:
        raise SystemExit(0)

def convert_to_mp3(filename, ext, stderr_out, preset=None):
    """
    converts input track to MPEG-1 Layer III format (aka MP3)
    """
    cmd1 = ["ffmpeg", "-y", "-i", filename + ext, "-f", "wav", "/dev/stdout"]
    cmd2 = ("lame " + preset).split()
    cmd2.extend(["-", "./" + filename + ".mp3"])
    return convert(stderr_out, cmdline1=cmd1, cmdline2=cmd2)

def convert_to_m4a(filename, ext, stderr_out, preset=None):
    """
    converts input track into MPEG-4 audio format (aka AAC/M4A/MP4)
    """
    cmd1 = ["ffmpeg", "-y", "-i", filename + ext, "-f", "wav", "/dev/stdout"]
    cmd2 = ("faac " + preset).split()
    cmd2.extend(["-o", "./" + filename + ".m4a", "/dev/stdin"])
    return convert(stderr_out, cmdline1=cmd1, cmdline2=cmd2)
   
def convert_to_wma(filename, ext, stderr_out, preset=None):
    """
    converts an input track into the Microsoft ASF format (aka WMA)
    """
    cmd1 = ["ffmpeg", "-y", "-i", filename + ext]
    cmd2 =  preset.split()
    cmd1.extend(cmd2)
    cmd1.append("./" + filename + ".wma")
    return convert(stderr_out, cmdline1=cmd1)

def convert_to_ogg(filename, ext, stderr_out, preset=None):
    """
    converts input track into Ogg Vorbis format
    """
    cmd1 = ["ffmpeg", "-y", "-i", filename + ext, "-f", "wav", "/dev/stdout"]
    cmd2 = ("oggenc " + preset).split()
    cmd2.extend(["-o", "./" + filename + ".ogg", "/dev/stdin"])
    return convert(stderr_out, cmdline1=cmd1, cmdline2=cmd2)
   
def convert_to_wav(filename, ext, stderr_out, preset=None):
    """
    decodes a track into WAVE format. This format has no metadata support.
    """
    cmd = ["ffmpeg", "-y", "-i", filename + ext, 
            "-f", "wav", "./" + filename + ".wav"]
    return convert(stderr_out, cmdline1=cmd)

def convert_to_flac(filename, ext, stderr_out, preset=None):
    """
    converts input track into Free Lossless Audio Codec format (aka FLAC).
    """
    status = convert_to_wav(filename, ext, stderr_out)
    if not status:
        return status
    cmd = ("flac " + preset).split()
    cmd.extend(["-f", "-o", "./" + filename + ".flac", filename + ".wav"])
    return convert(stderr_out, cmdline1=cmd)

def convert_to_mpc(filename, ext, stderr_out, preset=''):
    """
    converts input track into Musepack audio format
    """
    cmd1 = ["ffmpeg", "-y", "-i", filename + ext, "-f", "wav", "/dev/stdout"]
    cmd2 = ("mppenc " + preset).split()
    cmd2.extend(["-", "./" + filename + ".mpc"])
    return convert(stderr_out, cmdline1=cmd1, cmdline2=cmd2)

def convert(stderr_out, cmdline1=None, cmdline2=None):
    """
    executes audio conversion pipeline command
    """
    if cmdline1 is not None and cmdline2 is not None:
        p1 = Popen(cmdline1, stdout=PIPE, stderr=stderr_out)
        p2 = Popen(cmdline2, stdin=p1.stdout, stdout=PIPE, stderr=stderr_out)
        p2.communicate()
        return not p2.returncode
    elif cmdline1 is not None and cmdline2 is None:
        p1 = Popen(cmdline1, stdout=PIPE, stderr=stderr_out)
        p1.communicate()
        return not p1.returncode
    else:
        raise SystemExit("Error: unexpected arguments on: convert()")

def upgrade_version(current_version):
    """
    upgrades to the current available version
    """
    
    trunk_url = 'http://ftransc.googlecode.com/svn/trunk/'
    tmp_dir = 'tmp-ftransc_upgrade-tmp'
    if environ['USER'] != 'root':
        raise SystemExit('try using "sudo", you have to be "root" on this one.')
    target  = '%s/version' % trunk_url
    latest  = map(int, urlopen(target).read().strip().split('.'))
    current = map(int, current_version.split('.'))

    if latest > current:
        cmd = ['svn', 'export', trunk_url, tmp_dir]
        with open('/dev/null', 'w') as devnull:
            p1 = Popen(cmd, stdout=PIPE, stderr=devnull).communicate()
            chdir(tmp_dir)
            cmd = ['make', 'uninstall']
            Popen(cmd, stdout=PIPE, stderr=devnull).communicate()
            cmd = ['make', 'install']
            Popen(cmd, stdout=PIPE, stderr=devnull).communicate()
            chdir('..')
            cmd = ['rm', '-r', '-f', tmp_dir]
            Popen(cmd, stdout=PIPE, stderr=devnull).communicate()
    raise SystemExit('done')

supported_formats = set(['mp3', 'wma', 'wav', 'ogg', 'flac', 'm4a', 'mpc'])
quality_presets = {
        "mp3": 
        {
            "insane"    : "--cbr -b 320",
            "extreme"   : "-V 0",
            "high"      : "-V 2",
            "normal"    : "-V 4",
            "low"       : "--preset 64",
            "tiny"      : "--cbr -b 32 -m m -s 32",
            },
        "ogg": 
        {
            "insane"    : "-q 10",
            "extreme"   : "-q 8",
            "high"      : "-q 6",
            "normal"    : "",
            "low"       : "-q 1",
            "tiny"      : "-q -1",
            },
        "wma":
        {
            "insane"    : "-ab 320000 -ac 2 -acodec wmav2",
            "extreme"   : "-ab 256000 -ac 2 -acodec wmav2",
            "high"      : "-ab 192000 -ac 2 -acodec wmav2",
            "normal"    : "-ab 128000 -ac 2 -acodec wmav2",
            "low"       : "-ab 64000 -ac 2 -acodec wmav2",
            "tiny"      : "-ab 32000 -ac 2 -acodec wmav2",
            },
        "m4a":
        {
            "insane"    : "-q 500 -w",
            "extreme"   : "-q 350 -w",
            "high"      : "-q 200 -w",
            "normal"    : "-w",
            "low"       : "-q 50 -w",
            "tiny"      : "-q 10 -w",
            },
        "flac":
        {
            "insane"    : "--best",
            "extreme"   : "-7",
            "high"      : "-6",
            "normal"    : "-5",
            "low"       : "-3",
            "tiny"      : "--fast",
            },
        "mpc":
        {
            "insane"    : "--braindead --overwrite",
            "extreme"   : "--insane --overwrite",
            "high"      : "--extreme --overwrite",
            "normal"    : "--normal --overwrite",
            "low"       : "--telephone --overwrite",
            "tiny"      : "--quality 1.00 --overwrite",
            },
}
converters = {
        "mp3"   : convert_to_mp3, 
        "ogg"   : convert_to_ogg, 
        "m4a"   : convert_to_m4a, 
        "wma"   : convert_to_wma, 
        "wav"   : convert_to_wav, 
        "flac"  : convert_to_flac,
        "mpc"   : convert_to_mpc,
        }

if __name__ == "__main__":
    version = '4.1.2'
    rd = "\033[1;31m"
    gr = "\033[1;32m"
    yl = "\033[1;33m"
    bl = "\033[1;34m"
    pk = "\033[1;35m"
    nc = "\033[0m"

    no_tags = False
    if float(mutagen.version_string) < 1.17:
        print yl + "Warning:" + nc + \
                " your version of python-mutagen is older than version 1.17." +\
                "\nAll metadata tags will be lost.\n"
        no_tags = True
    
    parser = OptionParser(usage="%prog [options] [files]", version=version)
    parser.add_option('-f', '--format', type=str, default='mp3', 
            help='audio format to convert to')
    parser.add_option('-q', '--quality', type=str, default='normal', 
            help='audio quality preset')
    parser.add_option('-c', '--check', dest='check', action='store_true', 
            help='check dependencies')
    parser.add_option('-r', '--remove', dest='remove', action='store_true', 
            help='remove original file after converting successfully')
    parser.add_option('-d', '--decode', dest='decode', action='store_true', 
            help='decode file .wav format')
    parser.add_option('-w', '--over', dest='overwrite', action='store_true', 
            help='overwrite destination file if it exists already')
    parser.add_option('-u', '--unlock', dest='unlock', action='store_true', 
            help='unlock a locked file and convert')
    parser.add_option('-n', '--no-tags', dest='no_tags', action='store_true', 
            default=False, help='Disable metadata support')
    parser.add_option('--directory', dest="walk", type=str, 
            help='convert all files inside the given directory')
    parser.add_option('--upgrade', action='store_true', default=False,
            help='upgrade to the latest available version')
    opt, files = parser.parse_args()
    
    if opt.upgrade:
        upgrade_version(version)

    no_tags = opt.no_tags
        
    
    if environ['USER'] == 'root':
        raise SystemExit('It is not safe to run ftransc as a root.')
    
    if 'convert to ' in argv[0]:
        opt.format = argv[0].split()[-1]
    
    files = list(set(files)) #remove duplicates
    files.sort()
    home = getcwd()
    fmt = opt.format.lower()
    qual = opt.quality.lower()
    if opt.check:
        check_deps(check=True)
    if fmt in ("mp4", "m4a", "aac"): 
        fmt = "m4a"
    if fmt in ("mpc", "musepack"):
        fmt = "mpc"
    if fmt not in supported_formats:
        raise SystemExit("%s%s%s is not a supported format" % (rd, fmt, nc))
    if len(files) < 1 and opt.walk is None:
        raise SystemExit("ftransc: no input file")
    if opt.walk is not None:
        walker = walk(opt.walk)
        dest_dir, dummy, files = walker.next()
        pwd = getcwd()
        chdir(dest_dir)
    if opt.decode: 
        fmt = "wav"
    if fmt != 'wav':
        if qual not in quality_presets[fmt]:
            print "%s%s%s invalid quality preset, using %s%s%s." % \
                    (rd, qual, nc, gr, 'normal', nc)
            qual = "normal"
    try: 
        preset = quality_presets[fmt][qual]
    except KeyError: 
        preset = None
    old_dir = ''

    total = len(files)
    fails = 0
    times = []
    for c, in_tuple in enumerate([(dirname(x), basename(x)) for x in files]):
        new_dir, ifile = in_tuple
        tic = time()
        null = open('/dev/null','w')
        ofile = splitext(ifile)[0] + "." + fmt 
        if new_dir:
            if not isabs(new_dir):
                new_dir = home + sep + new_dir
            new_dir = realpath(new_dir)
            if new_dir != getcwd():
                chdir(new_dir)
                print "\n___ Working Directory '%s' ___ " % new_dir
        else:
            if getcwd() != home:
                chdir(home)
                print "\n___ Working Directory '%s' ___ " % home

        if ofile == ifile:
            print "%s%d/%d%s | %s%s%s | input = output | %sskipped%s" % \
                    (pk, c + 1, total, nc, bl, ifile, nc, yl, nc)
            fails += 1
            continue
        if not exists(ifile):
            print "%s%d/%d%s | %s%s%s | %sdoes not exist%s" % \
                    (pk, c + 1, total, nc, bl, ifile, nc, rd, nc)
            fails += 1
            continue
        if isfile(ofile) and not opt.overwrite:
            print "%s%d/%d%s | %s%s%s | use '-w' to overwrite | %sskipped%s" % \
                    (pk, c + 1, total, nc, bl, ifile, nc, yl, nc)
            fails += 1
            continue
        if isdir(ifile) and opt.walk is None:
            print "%s%d/%d%s | %s%s%s |  use '--directory' | %sskipped%s" % \
                    (pk, c + 1, total, nc, bl, ifile, nc, yl, nc)
            fails += 1
            continue
        #_____________ lockfile creation ________________
        swp_file = ".%s.swp" % ifile
        if isfile(swp_file) and not opt.unlock:
            print "%s%d/%d%s | %s%s%s | use '-u' to unlock | %sskipped%s" % \
                    (pk, c + 1, total, nc, bl, ifile, nc, yl, nc)
            fails += 1
            continue
        elif not isfile(swp_file):
            try:
                with open(swp_file, 'w'): 
                    pass
            except IOError:
                raise SystemExit("%sNo permissions%s to write to this folder" %\
                        (rd, nc))
        #______________ extract metadata ________________
        try:
            if not no_tags:
                metadata = MetaTag(ifile)
        except IOError:
            print "%s%d/%d%s | %s%s%s | %sUnreadable%s"  % \
                    (pk, c + 1, total, nc, bl, ifile, nc, rd, nc)
            dummy = remove(swp_file)
            fails += 1
            continue
        #___________ audio convert ______________
        ifilename, in_ext = splitext(ifile)
        system('printf "%s%d/%d%s | to %s | %s%s%s ... "' % \
                (pk, c + 1, total, nc, fmt.upper(), bl, ifile, nc))
        if converters[fmt](ifilename, in_ext, null, preset=preset):
            print "%sSuccess%s" % (gr, nc),
            if opt.remove: 
                dummy = remove(ifile)
            if fmt.lower() == "flac":
                dummy = remove(ifilename + '.wav')
            dummy = remove(swp_file)
        else:
            print "%sFail%s" % (rd, nc)
            dummy = remove(swp_file)
            del metadata
            fails += 1
            continue
        #___________ insert metadata to new audio file ___________
        try:
            if not no_tags:
                metadata.insert(ofile)
                del metadata
        except:
            pass
        null.close()
        toc = time()
        times.append(toc - tic)
        print "| %d sec" % (toc - tic)

    
    if Popen(["which", 'notify-send'], stdout=PIPE).communicate()[0].strip():
        Popen(
              [
                'notify-send', 
                'ftransc - the Audio Converter', 
                'Converted %d files to %s format\n\t%d PASSED\n\t%d FAILED' % \
                            (total, fmt.upper(), total - fails, fails)
                ],
                stdout=PIPE).communicate()

    if times:
        print '_' * 80
        print 'average: %d sec per song' % int(sum(times)/(1.0*len(times)))
        hr = int(sum(times)  / 3600)
        mn = int((sum(times) % 3600) / 60)
        sc = int(sum(times)  % 3600  % 60)
        print 'total: %d songs converted in %d hours, %d minutes and %d seconds' %\
            (total, hr, mn, sc)
        print '_' * 80

